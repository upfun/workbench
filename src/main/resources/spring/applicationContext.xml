<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">
       <!--自动扫描包，将带有注解的类纳入spring容器-->
       <context:component-scan base-package="com.webnono"></context:component-scan>

       <!--引入配置文件-->
       <bean id="propertyConfigurer"
             class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
              <property name="locations">
                     <list>
                            <value>classpath*:/spring/application.properties</value>
                     </list>
              </property>
       </bean>

       <!--dataSource 配置-->
       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
             destroy-method="close">
              <!--basic settings-->
              <property name="driverClassName" value="${jdbc.driver}"/>
              <property name="url" value="${jdbc.url}"/>
              <property name="username" value="${jdbc.username}"/>
              <property name="password" value="${jdbc.password}"/>

              <!--config initialsize minidle maxActive-->
              <property name="initialSize" value="${jdbc.initialSize}"/>
              <property name="minIdle" value="${jdbc.minIdle}"/>
              <property name="maxActive" value="${jdbc.maxActive}"/>

              <!--config timeout  =ms-->
              <property name="maxWait" value="${jdbc.maxWait}"/>

              <property name="validationQuery" value="SELECT 1"/>
              <property name="testWhileIdle" value="true"/>
              <property name="testOnBorrow" value="false"/>
              <property name="testOnReturn" value="false"/>

              <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
              <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>

              <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
              <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
       </bean>

       <!--mybatis文件配置，扫描mapper文件-->
       <bean id="sqlSessionFactory"
             class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource"/>
              <property name="configLocation" value="classpath:/spring/mybatis-orm.xml"/>
              <property name="mapperLocations" value="classpath*:/models/*.xml"/>
       </bean>
       <!--<mybatis:scan base-package="com.webnono.task.dao"/>&lt;!&ndash;可以代替下面的包扫描配置&ndash;&gt;-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.webnono.web.dao"/>
       </bean>
       <!--对数据源dataSource进行事务管理-->
       <bean id="transactionManager"
             class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"/>
       </bean>

       <!-- 事务管理 通知 -->
       <tx:advice id="txAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
                     <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
                     <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
                     <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
                     <!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
                     <tx:method name="select*" read-only="true"/>
                     <tx:method name="count*" read-only="true"/>
                     <!-- 对其他方法 使用默认的事务管理 -->
                     <tx:method name="*"/>
              </tx:attributes>
       </tx:advice>

       <!-- 事务 aop 配置 -->
       <aop:config>
              <aop:pointcut id="serviceMethods" expression="execution(* com.webnono.web.service..*(..))"/>
              <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
       </aop:config>

       <!-- 配置使Spring采用CGLIB代理 -->
       <aop:aspectj-autoproxy proxy-target-class="true"/>

       <!-- 启用对事务注解的支持 -->
       <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>